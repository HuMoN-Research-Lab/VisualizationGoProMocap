import numpy as np, bpy
from mathutils import Matrix, Vector, Euler

# the array is saved in the file 
arr = np.load(r"/Users/jackieallex/Downloads/markerless-reconstructed/output_3d_skeleton_with_hands.npy") 

#3D array holding [[[x, y, z], [x, y, z]], [[x, y, z], [x, y, z]]] 
#an array of frames, where each frame is an array of points and each point is an array of floats (x, y, z)
  
#the first frame
markers_list = arr[0]

#names of markers 
name_arr = ["Nose", "Neck", "RShoulder", "RElbow", "RWrist", "LShoulder",
"LElbow", "LWrist", "MidHip", "RHip", "RKnee", "RAnkle", "LHip", "LKnee",
"LAnkle", "REye", "LEye", "REar", "LEar", "LBigToe", "LSmallToe", "LHeel",
"RBigToe", "RSmallToe", "RHeel"]

#use to create bones based on:
order_of_markers = []

order_of_markers.append(bpy.context.scene.objects["Nose"])
order_of_markers.append(bpy.context.scene.objects["Neck"])
order_of_markers.append(bpy.context.scene.objects["RShoulder"])
order_of_markers.append(bpy.context.scene.objects["RElbow"])
order_of_markers.append(bpy.context.scene.objects["RWrist"])
order_of_markers.append(bpy.context.scene.objects["LShoulder"])

order_of_markers.append(bpy.context.scene.objects["LElbow"])
order_of_markers.append(bpy.context.scene.objects["LWrist"])
order_of_markers.append(bpy.context.scene.objects["MidHip"])
order_of_markers.append(bpy.context.scene.objects["RHip"])
order_of_markers.append(bpy.context.scene.objects["RKnee"])
order_of_markers.append(bpy.context.scene.objects["RAnkle"])
order_of_markers.append(bpy.context.scene.objects["LHip"])
order_of_markers.append(bpy.context.scene.objects["LKnee"])

order_of_markers.append(bpy.context.scene.objects["LAnkle"])
order_of_markers.append(bpy.context.scene.objects["REye"])
order_of_markers.append(bpy.context.scene.objects["LEye"])
order_of_markers.append(bpy.context.scene.objects["REar"])
order_of_markers.append(bpy.context.scene.objects["LEar"])
order_of_markers.append(bpy.context.scene.objects["LBigToe"])
order_of_markers.append(bpy.context.scene.objects["LSmallToe"])
order_of_markers.append(bpy.context.scene.objects["LHeel"])

order_of_markers.append(bpy.context.scene.objects["RBigToe"])
order_of_markers.append(bpy.context.scene.objects["RSmallToe"])
order_of_markers.append(bpy.context.scene.objects["RHeel"])

order_of_markers.append(bpy.context.scene.objects["HandR"])
order_of_markers.append(bpy.context.scene.objects["HandR.001"])
order_of_markers.append(bpy.context.scene.objects["HandR.002"])
order_of_markers.append(bpy.context.scene.objects["HandR.003"])
order_of_markers.append(bpy.context.scene.objects["HandR.004"])
order_of_markers.append(bpy.context.scene.objects["HandR.005"])
order_of_markers.append(bpy.context.scene.objects["HandR.006"])
order_of_markers.append(bpy.context.scene.objects["HandR.007"])
order_of_markers.append(bpy.context.scene.objects["HandR.008"])
order_of_markers.append(bpy.context.scene.objects["HandR.009"])
order_of_markers.append(bpy.context.scene.objects["HandR.010"])
order_of_markers.append(bpy.context.scene.objects["HandR.011"])
order_of_markers.append(bpy.context.scene.objects["HandR.012"])
order_of_markers.append(bpy.context.scene.objects["HandR.013"])
order_of_markers.append(bpy.context.scene.objects["HandR.014"])
order_of_markers.append(bpy.context.scene.objects["HandR.015"])
order_of_markers.append(bpy.context.scene.objects["HandR.016"])
order_of_markers.append(bpy.context.scene.objects["HandR.017"])
order_of_markers.append(bpy.context.scene.objects["HandR.018"])
order_of_markers.append(bpy.context.scene.objects["HandR.019"])
order_of_markers.append(bpy.context.scene.objects["HandR.020"])

order_of_markers.append(bpy.context.scene.objects["HandL"])
order_of_markers.append(bpy.context.scene.objects["HandL.001"])
order_of_markers.append(bpy.context.scene.objects["HandL.002"])
order_of_markers.append(bpy.context.scene.objects["HandL.003"])
order_of_markers.append(bpy.context.scene.objects["HandL.004"])
order_of_markers.append(bpy.context.scene.objects["HandL.005"])
order_of_markers.append(bpy.context.scene.objects["HandL.006"])
order_of_markers.append(bpy.context.scene.objects["HandL.007"])
order_of_markers.append(bpy.context.scene.objects["HandL.008"])
order_of_markers.append(bpy.context.scene.objects["HandL.009"])
order_of_markers.append(bpy.context.scene.objects["HandL.010"])
order_of_markers.append(bpy.context.scene.objects["HandL.011"])
order_of_markers.append(bpy.context.scene.objects["HandL.012"])
order_of_markers.append(bpy.context.scene.objects["HandL.013"])
order_of_markers.append(bpy.context.scene.objects["HandL.014"])
order_of_markers.append(bpy.context.scene.objects["HandL.015"])
order_of_markers.append(bpy.context.scene.objects["HandL.016"])
order_of_markers.append(bpy.context.scene.objects["HandL.017"])
order_of_markers.append(bpy.context.scene.objects["HandL.018"])
order_of_markers.append(bpy.context.scene.objects["HandL.019"])
order_of_markers.append(bpy.context.scene.objects["HandR.020"])

print(order_of_markers)


#-----------------------------------------------------------------------------------
# Animate! 
#find number of frames in animation
num_frames = len(arr) #500 frames at 120 fps
frames_seen = 0

# delete previously created constrains     
def del_constraints( bone ):
        for c in bone.constraints:
            bone.constraints.remove( c ) # Remove constraint
    
#create a new handler to change empty positions every frame
def my_handler(scene): 
    #must be in pose mode to set keyframes
    bpy.ops.object.mode_set(mode='POSE')
    #keep track of current_marker
    current_marker = 0
    #find the current frame number
    frame = scene.frame_current
    #get the list of marker points from the current frame
    markers_list = arr[frame]
    #iterate through list of markers in this frame
    for col in markers_list:
        coord = Vector((float(col[0]), float(col[1]), float(col[2])))
        empty = order_of_markers[current_marker] 
        #change empty position : this is where the change in location every frame happens
        empty.location = coord
        #Set keyframes of the empty location at this frame to save the animation
        #empty.keyframe_insert(data_path='location',frame=scene.frame_current)
        #increment counter of the number marker we are currently changing
        current_marker += 1 
        #future... may want to continue to look into how to keyframe each bone in amrature
        if(current_marker == len(markers_list)):
            #frames_seen += 1
            for bone in bpy.data.objects['Armature'].pose.bones:
                bpy.ops.pose.visual_transform_apply()
                bone.keyframe_insert(data_path = 'location')
                if bone.rotation_mode == "QUATERNION":
                    bone.keyframe_insert(data_path = 'rotation_quaternion')
                else:
                    bone.keyframe_insert(data_path = 'rotation_euler')
                bone.keyframe_insert(data_path = 'scale')
    #if (frames_seen == 500):
        #print("unregister")
        #unregister();
        
         
                
#-----------------------------------------------------------------------------------
#bake action from keyframes 
#bpy.ops.nla.bake(frame_start=0, frame_end=num_frames, only_selected=True, visual_keying=True, clear_constraints=False, use_current_action=False, bake_types={'POSE'})
            
#print ("Action: {}, First frame: {}, Second frame: {}".format(a.name, firstFrame, lastFrame))


#bpy.ops.nla.bake(frame_start=1, frame_end=250, step=1, only_selected=True, visual_keying=False, clear_constraints=False, clear_parents=False, use_current_action=False, bake_types={'POSE'})
#-----------------------------------------------------------------------------------
#function to register custom handler
def register():
   bpy.app.handlers.frame_change_post.append(my_handler)
   
def unregister():
    bpy.app.handlers.frame_change_post.remove(my_handler)
    
register()